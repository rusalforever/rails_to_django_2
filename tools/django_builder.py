# tools/django_builder.py
import os
from pathlib import Path
from tools import file_tools, template_converter

def create_core_files(state):
    """Build Django project fully from LLM-generated blueprint."""
    blueprint = state.get("django_blueprint", {}) or {}
    project_name = blueprint.get("project_name", "converted_project")
    output_dir = state.output_dir
    project_root = Path(output_dir) / project_name
    os.makedirs(project_root, exist_ok=True)

    generated = []

    # Core project files
    core_files = {
        "__init__.py": "",
        "settings.py": blueprint.get("settings_code", "# settings generated by LLM\n"),
        "urls.py": blueprint.get("urls_code", "# urls generated by LLM\n"),
        "asgi.py": f"""import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{project_name}.settings')
application = get_asgi_application()
""",
        "wsgi.py": f"""import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{project_name}.settings')
application = get_wsgi_application()
""",
        "manage.py": f"""#!/usr/bin/env python3
import os, sys
def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{project_name}.settings')
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)
if __name__ == '__main__':
    main()
""",
        "requirements.txt": "\n".join(blueprint.get("requirements", ["Django>=5,<6", "Pillow"]))
    }

    for filename, content in core_files.items():
        file_tools.write_file(str(project_root / filename), content)
        generated.append(str(project_root / filename))

    # Apps
    for app in blueprint.get("apps", []):
        app_name = app.get("name", "app")
        app_dir = project_root / app_name
        os.makedirs(app_dir, exist_ok=True)
        (app_dir / "templates" / app_name).mkdir(parents=True, exist_ok=True)

        files = {
            "__init__.py": "",
            "models.py": app.get("models_code", ""),
            "views.py": app.get("views_code", ""),
            "urls.py": app.get("urls_code", ""),
            "admin.py": app.get("admin_code", ""),
            "apps.py": (
                f"from django.apps import AppConfig\n\n"
                f"class {app_name.capitalize()}Config(AppConfig):\n"
                f"    default_auto_field='django.db.models.BigAutoField'\n"
                f"    name='{app_name}'\n"
            ),
        }

        for filename, content in files.items():
            file_tools.write_file(str(app_dir / filename), content)
            generated.append(str(app_dir / filename))

        # Templates with LLM-based conversion
        for tpl in app.get("templates", []):
            tpl_name = tpl.get("name")
            tpl_content = tpl.get("content", "")
            if not tpl_name:
                continue

            tpl_filename = template_converter.convert_filename(tpl_name)
            tpl_path = app_dir / "templates" / tpl_filename

            if tpl_name.endswith(".erb"):
                print(f"âœ¨ Converting ERB template via LLM: {tpl_name}")
                tpl_content = template_converter.convert_template_with_llm(tpl_content, tpl_name)

            file_tools.write_file(str(tpl_path), tpl_content)
            generated.append(str(tpl_path))

    state.generated_files = generated
    state.project_root = str(project_root)
    return {"generated": generated}
